import {
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractWrapper,
  Erc20SignatureMintable,
  GasCostEstimator,
  StandardErc20,
  TokenERC20History,
  TokenErc20ContractSchema,
  Transaction,
  _defineProperty,
  buildTransactionFunction,
  getRoleHash,
  require_browser_ponyfill,
  require_bs58,
  require_dist,
  require_fast_deep_equal
} from "./chunk-ABPUW44L.js";
import {
  lib_exports7 as lib_exports,
  require_bn
} from "./chunk-SUFE7EWL.js";
import {
  __toESM
} from "./chunk-FJLWZCXQ.js";

// node_modules/@thirdweb-dev/sdk/dist/token-97d07107.esm.js
var import_bn = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var Token = class extends StandardErc20 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options);
    super(contractWrapper, storage, chainId);
    _defineProperty(this, "abi", void 0);
    _defineProperty(this, "metadata", void 0);
    _defineProperty(this, "app", void 0);
    _defineProperty(this, "roles", void 0);
    _defineProperty(this, "encoder", void 0);
    _defineProperty(this, "estimator", void 0);
    _defineProperty(this, "history", void 0);
    _defineProperty(this, "events", void 0);
    _defineProperty(this, "platformFees", void 0);
    _defineProperty(this, "sales", void 0);
    _defineProperty(this, "signature", void 0);
    _defineProperty(this, "interceptor", void 0);
    _defineProperty(this, "mint", buildTransactionFunction(async (amount) => {
      return this.erc20.mint.prepare(amount);
    }));
    _defineProperty(this, "mintTo", buildTransactionFunction(async (to, amount) => {
      return this.erc20.mintTo.prepare(to, amount);
    }));
    _defineProperty(this, "mintBatchTo", buildTransactionFunction(async (args) => {
      return this.erc20.mintBatchTo.prepare(args);
    }));
    _defineProperty(this, "delegateTo", buildTransactionFunction(async (delegateeAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "delegate",
        args: [delegateeAddress]
      });
    }));
    _defineProperty(this, "burn", buildTransactionFunction((amount) => {
      return this.erc20.burn.prepare(amount);
    }));
    _defineProperty(this, "burnFrom", buildTransactionFunction(async (holder, amount) => {
      return this.erc20.burnFrom.prepare(holder, amount);
    }));
    this.abi = abi;
    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.history = new TokenERC20History(this.contractWrapper, this.events);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);
  }
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(account) {
    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));
  }
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  async getDelegationOf(account) {
    return await this.contractWrapper.readContract.delegates(account);
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash("transfer"), lib_exports.AddressZero);
    return !anyoneCanTransfer;
  }
  async getMintTransaction(to, amount) {
    return this.erc20.getMintTransaction(to, amount);
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return this.contractWrapper.call(functionName, ...args);
  }
};
_defineProperty(Token, "contractRoles", ["admin", "minter", "transfer"]);
export {
  Token
};
//# sourceMappingURL=token-97d07107.esm-HFGAAPPU.js.map
